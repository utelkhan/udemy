allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    group = "kz"
    version = "0.0.1"

    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    [compileJava, compileTestJava]*.options*.debugOptions*.debugLevel = "source,lines,vars"
}

subprojects {
    task allDeps(type: DependencyReportTask) {}

    dependencies {
        ext.logbackVersion = "1.4.8"
        ext.lombokVersion = '1.18.26'
        ext.assertjVersion = "3.24.2"

        implementation "org.assertj:assertj-core:$assertjVersion"
        implementation "ch.qos.logback:logback-core:$logbackVersion"
        implementation "org.projectlombok:lombok:$lombokVersion"
    }

    tasks.withType(Javadoc) {
        //noinspection SpellCheckingInspection
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }

    test.useTestNG()
    idea.module.downloadSources = true
    idea.module.downloadJavadoc = true
    idea.module.inheritOutputDirs = false
    idea.module.outputDir = file("$buildDir/idea_classes/main/")
    idea.module.testOutputDir = file("$buildDir/idea_classes/test/")

    sourceSets.main.java.srcDirs = ["src"]
    sourceSets.test.java.srcDirs = ["test_src"]
    sourceSets.main.resources.srcDirs = ["src_resources"]
    sourceSets.test.resources.srcDirs = ["test_resources"]

    sourceSets.main.resources {
        srcDirs += sourceSets.main.java.srcDirs
        exclude '**/*.java'
    }
    sourceSets.test.resources {
        srcDirs += sourceSets.test.java.srcDirs
        exclude '**/*.java'
    }

    jar {
        manifest {
            attributes 'Specification-Title': project.name
            attributes 'Specification-Version': archiveVersion
            attributes 'Specification-Vendor': "aza-udemy-pracitce"

            attributes 'Implementation-Version': extractLastGitCommitId()

            attributes 'Created-By': System.getProperty("user.name")
            attributes 'Created-At': new Date().format("yyyy-MM-dd/HH:mm:ss")
        }
    }

}

def extractLastGitCommitId() {
    def gitFolder = "${rootProject.projectDir}/.git/"

    def takeFromHash = 17

    //noinspection GroovyAssignabilityCheck
    if (!new File(gitFolder + "HEAD").exists()) {
        return "UNKNOWN"
    }

    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    //noinspection GroovyAssignabilityCheck
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1
    // def isRef = head.length > 1     // ref: refs/heads/master

    if (isCommit) {
        return head[0].trim().take(takeFromHash)
    }

    def reference = head[1].trim()

    //noinspection GroovyAssignabilityCheck
    def refHead = new File(gitFolder + reference) // .git/refs/heads/master
    if (refHead.exists()) {
        return refHead.text.trim().take(takeFromHash)
    }

    //noinspection GroovyAssignabilityCheck
    def packedRefsFile = new File(gitFolder + "packed-refs")

    if (packedRefsFile.exists()) {

        def lines = packedRefsFile.text.split("\n")

        for (String line : lines) {

            if (line.trim().startsWith("#")) {
                continue
            }

            def split = line.split("\\s+")
            if (split.length == 2) {

                if (split[1] == reference) {
                    return split[0]
                }

            }
        }

    }

    throw new Exception("Cannot find commit id")
}
